#[repr(i8)]
#[derive(Clone, Copy)]
pub enum Reg {
    W0 = 0,
    X0 = 32,
    W1 = 1,
    X1 = 1 | 32,
    W2 = 2,
    X2 = 2 | 32,
    W3 = 3,
    X3 = 3 | 32,
    W4 = 4,
    X4 = 4 | 32,
    W5 = 5,
    X5 = 5 | 32,
    W6 = 6,
    X6 = 6 | 32,
    W7 = 7,
    X7 = 7 | 32,
    W8 = 8,
    X8 = 8 | 32,
    W9 = 9,
    X9 = 9 | 32,
    W10 = 10,
    X10 = 10 | 32,
    W11 = 11,
    X11 = 11 | 32,
    W12 = 12,
    X12 = 12 | 32,
    W13 = 13,
    X13 = 13 | 32,
    W14 = 14,
    X14 = 14 | 32,
    W15 = 15,
    X15 = 15 | 32,
    W16 = 16,
    X16 = 16 | 32,
    W17 = 17,
    X17 = 17 | 32,
    W18 = 18,
    X18 = 18 | 32,
    W19 = 19,
    X19 = 19 | 32,
    W20 = 20,
    X20 = 20 | 32,
    W21 = 21,
    X21 = 21 | 32,
    W22 = 22,
    X22 = 22 | 32,
    W23 = 23,
    X23 = 23 | 32,
    W24 = 24,
    X24 = 24 | 32,
    W25 = 25,
    X25 = 25 | 32,
    W26 = 26,
    X26 = 26 | 32,
    W27 = 27,
    X27 = 27 | 32,
    W28 = 28,
    X28 = 28 | 32,
    W29 = 29,
    X29 = 29 | 32,
    W30 = 30,
    X30 = 30 | 32,
    W31 = 31,
    X31 = 31 | 32,
}

pub fn is_64_bit(reg: Reg) -> bool {
    reg as i8 & 32 != 0
}
